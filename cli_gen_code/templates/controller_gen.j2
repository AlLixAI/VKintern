import uuid

from sqlalchemy import select, update

from rest.models.base_db.models import JSON_App, AppState
from fastapi import APIRouter, HTTPException, Depends, Path
from sqlalchemy.ext.asyncio import AsyncSession
from rest.database import get_async_session
from rest.models.{{ prefix }}.{{ prefix }}_model import {{ tag }}Document, Configuration, {{ prefix }}Settings
from rest.kafka_producer import kafka_producer


router = APIRouter(
    prefix="/{{ prefix }}",
    tags=["{{ tag }}"])

@router.post("/")
async def create_{{ prefix }}_item(
    {{ prefix }}_item: {{ tag }}Document,
    session: AsyncSession = Depends(get_async_session)
):
    try:
        new_uuid = uuid.uuid4()

        new_app = JSON_App(
            UUID=new_uuid,
            kind={{ prefix }}_item.kind,
            name={{ prefix }}_item.name,
            version={{ prefix }}_item.version,
            description={{ prefix }}_item.description,
            state=AppState.NEW,
            json={{ prefix }}_item.dict()
        )
        session.add(new_app)
        await session.commit()
        try:
            kafka_message = {"uuid": str(new_uuid), "kind": {{ prefix }}_item.name, "name": {{ prefix }}_item.name}
            await kafka_producer.send_message("{{ topic }}", str(new_uuid), kafka_message)
        except Exception as e:
            print(e)

        return {"uuid": str(new_uuid)}

    except Exception as e:
        await session.rollback()
        raise HTTPException(status_code=500, detail=f"error to create {{ prefix }} file: {str(e)}")

@router.put("/{uuid}/configuration/")
async def update_{{ prefix }}_configuration(
    configuration: Configuration,
    uuid: uuid.UUID = Path(..., description="UUID of the item"),
    session: AsyncSession = Depends(get_async_session)
):
    try:
        app = await session.execute(
            select(JSON_App).where(JSON_App.UUID == uuid, JSON_App.kind == "{{ prefix }}")
        )

        app = app.scalars().first()

        if not app:
            raise HTTPException(status_code=404, detail="{{ prefix }} item not found")

        old_config = app.json['configuration']
        app.json['configuration']['specification'] = configuration.specification.dict()
        app.json['configuration']['settings'] = configuration.settings.dict()
        new_config = app.json['configuration']

        await session.execute(
            update(JSON_App)
            .where(JSON_App.UUID == uuid)
            .values(json=app.json)
        )

        await session.commit()

        try:
            kafka_message = {"uuid": str(app.UUID), "old_config": old_config, "new_config": new_config}
            await kafka_producer.send_message("{{ topic }}", str(app.UUID), kafka_message)
        except Exception as e:
            print(e)

        return {"message": f"Configuration updated successfully for UUID: {uuid}"}

    except HTTPException:
        raise
    except Exception as e:
        await session.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to update configuration: {str(e)}")

@router.put("/{uuid}/settings/")
async def update_{{ prefix }}_settings(
    settings: {{ prefix }}Settings,
    uuid: uuid.UUID = Path(..., description="UUID of the item"),
    session: AsyncSession = Depends(get_async_session)
):
    try:
        app = await session.execute(
            select(JSON_App).where(JSON_App.UUID == uuid, JSON_App.kind == "{{ prefix }}")
        )

        app = app.scalars().first()

        if not app:
            raise HTTPException(status_code=404, detail="{{ prefix }} item not found")

        old_settings = app.json['configuration']['settings']
        app.json['configuration']['settings'] = settings.dict()
        new_settings = app.json['configuration']['settings']

        await session.execute(
            update(JSON_App)
            .where(JSON_App.UUID == uuid)
            .values(json=app.json)
        )

        await session.commit()

        try:
            kafka_message = {"uuid": str(app.UUID), "old_settings": old_settings, "new_settings": new_settings}
            await kafka_producer.send_message("{{ topic }}", str(app.UUID), kafka_message)
        except Exception as e:
            print(e)

        return {"message": f"Configuration updated successfully for UUID: {uuid}"}

    except HTTPException:
        raise
    except Exception as e:
        await session.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to update settings: {str(e)}")


@router.put("/{uuid}/state/")
async def update_{{ prefix }}_state(
    new_state: AppState,
    uuid: uuid.UUID = Path(..., description="UUID of the item"),
    session: AsyncSession = Depends(get_async_session)
):
    try:
        app = await session.execute(
            select(JSON_App).where(JSON_App.UUID == uuid, JSON_App.kind == "{{ prefix }}")
        )

        app = app.scalars().first()

        if not app:
            raise HTTPException(status_code=404, detail="{{ prefix }} item not found")


        old_state = app.state
        app.state = new_state.value

        await session.commit()

        try:
            kafka_message = {"uuid": str(app.UUID), "old_state": str(old_state), "new_state": str(new_state.value)}
            await kafka_producer.send_message("{{ topic }}", str(app.UUID), kafka_message)
        except Exception as e:
            print(e)

        return {"message": f"State updated successfully for UUID: {uuid}"}

    except HTTPException:
        raise
    except Exception as e:
        await session.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to update state: {str(e)}")

@router.delete("/{uuid}/")
async def delete_{{ prefix }}_item(
    uuid: uuid.UUID = Path(..., description="UUID of the item"),
    session: AsyncSession = Depends(get_async_session)
):
    try:
        app = await session.execute(
            select(JSON_App).where(JSON_App.UUID == uuid, JSON_App.kind == "{{ prefix }}")
        )

        app = app.scalars().first()

        if not app:
            raise HTTPException(status_code=404, detail="{{ prefix }} item not found")

        await session.delete(app)
        await session.commit()

        try:
            kafka_message = {"uuid": str(uuid), "deleted": True}
            await kafka_producer.send_message("{{ topic }}", str(uuid), kafka_message)
        except Exception as e:
            print(e)

        return {"message": f"{{ tag }} with UUID {uuid} deleted successfully"}

    except HTTPException:
        raise
    except Exception as e:
        await session.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to delete {{ prefix }} item: {str(e)}")


@router.get("/{uuid}")
async def read_{{ prefix }}_item(
    uuid: uuid.UUID = Path(..., description="UUID of the item"),
    session: AsyncSession = Depends(get_async_session)
):
    try:
        app = await session.execute(
            select(JSON_App).where(JSON_App.UUID == uuid, JSON_App.kind == "{{ prefix }}")
        )

        app = app.scalars().first()

        if not app:
            raise HTTPException(status_code=404, detail="{{ prefix }} item not found")

        try:
            kafka_message = {"uuid": str(uuid), "get": True}
            await kafka_producer.send_message("{{ topic }}", str(app.UUID), kafka_message)
        except Exception as e:
            print(e)

        return {
            "UUID": str(app.UUID),
            "kind": app.kind,
            "name": app.name,
            "version": app.version,
            "description": app.description,
            "state": app.state.value,
            "json": app.json
        }

    except HTTPException:
        raise
    except Exception as e:
        await session.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to get {{ prefix }} item: {str(e)}")

@router.get("/{uuid}/state")
async def read_{{ prefix }}_state(
    uuid: uuid.UUID = Path(..., description="UUID of the item"),
    session: AsyncSession = Depends(get_async_session)
):
    try:
        app = await session.execute(
            select(JSON_App).where(JSON_App.UUID == uuid, JSON_App.kind == "{{ prefix }}")
        )

        app = app.scalars().first()

        if not app:
            raise HTTPException(status_code=404, detail="{{ prefix }} item not found")


        try:
            kafka_message = {"uuid": str(app.UUID), "get_state": True}
            await kafka_producer.send_message("{{ topic }}", str(app.UUID), kafka_message)
        except Exception as e:
            print(e)

        return {
            "state": app.state.value
        }

    except HTTPException:
        raise
    except Exception as e:
        await session.rollback()
        raise HTTPException(status_code=500, detail=f"Failed to get state {{ prefix }} item: {str(e)}")

